# NOTE: update this with your service name
service: lab-partner-app

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ca-central-1

  environment:
    userTable: process.env.userTable
    classTable: process.env.classTable

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource: "arn:aws:dynamodb:ca-central-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /create-user
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createUser:
    handler: createUser.main
    events:
      - http:
          path: create-user
          method: post
          cors: true
          authorizer: aws_iam

  createClass: 
    handler: classes.create
    events:
      - http:
          path: create-class
          method: post
          cors: true
          authorizer: aws_iam

  getAllClasses:
    handler: classes.get_all
    events:
      - http:
          path: classes/
          method: get
          cors: true
          authorizer: aws_iam

  getAllFaculties:
    handler: classes.get_all_faculties
    events:
      - http:
          path: classes/get-faculties
          method: get
          cors: true
          authorizer: aws_iam
          
  getClassesFaculty:
    handler: classes.get_faculty
    events:
      - http:
          path: classes/faculty/{id}
          method: get
          cors: true
          authorizer: aws_iam
          
  getClassesID:
    handler: classes.get_id
    events:
      - http:
          path: classes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  createPost:
    handler: classes.create_post
    events:
      - http:
          path: classes/{id}
          method: put
          cors: true
          authorizer: aws_iamcr
      
resources: 
  - ${file(resources/api-gateway-errors.yml)}